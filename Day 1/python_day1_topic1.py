# -*- coding: utf-8 -*-
"""Python_Day1_Topic1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yKIT3rdMoe06wcx_2cQ1MZLQ_B4ATeQi
"""

#challenge 1: Student Info Formatter (Variables + Blocks)
# Storing student details in variables
name = "Alice"
age = 14
grade = "A"

# Defining a function to print student info
def print_student_info():
    print(f"Student Name: {name}, Age: {age}, Grade: {grade}")

# Calling the function
print_student_info()

#Challenge 2: Shopping Cart Calculator (Operators + variable)
# Storing prices of 3 items
item1 = 40
item2 = 35
item3 = 45

# Calculating total cost
total = item1 + item2 + item3

print("Cart Total:", total)

# Applying 10% discount if total > 100
if total > 100:
    discount = total * 10 / 100
    final_total = total - discount
    print("Discount Applied:", discount)
    print("Final Total:", final_total)
else:
    print("No Discount Applied")
    print("Final Total:", total)

#Challenge 3: Odd/Even Checker (Blocks + Operators)
# Function to check if a number is odd or even
def check_odd_even():
    num = int(input("Enter a number: "))  # Taking input
    if num % 2 == 0:
        print(f"Number {num} is Even")
    else:
        print(f"Number {num} is Odd")

# Calling the function
check_odd_even()

#Challenge 4: Temperature Converter
# Function to convert Celsius to Fahrenheit
def c_to_f():
    celsius = float(input("Enter temperature in Celsius: "))
    fahrenheit = (celsius * 9 / 5) + 32
    print(f"{celsius}°C = {fahrenheit}°F")

# Function to convert Fahrenheit to Celsius
def f_to_c():
    fahrenheit = float(input("Enter temperature in Fahrenheit: "))
    celsius = (fahrenheit - 32) * 5 / 9
    print(f"{fahrenheit}°F = {celsius:.2f}°C")

# Menu for user to choose conversion type
print("Temperature Converter")
print("1. Celsius → Fahrenheit")
print("2. Fahrenheit → Celsius")

choice = int(input("Enter your choice (1 or 2): "))

if choice == 1:
    c_to_f()
elif choice == 2:
    f_to_c()
else:
    print("Invalid choice! Please select 1 or 2.")

#Challenge 5: Calculator
# Function for addition
def add(a, b):
    return a + b

# Function for subtraction
def sub(a, b):
    return a - b

# Function for multiplication
def mul(a, b):
    return a * b

# Function for division
def div(a, b):
    if b != 0:
        return a / b
    else:
        return "Division by zero is not allowed!"

# Test inputs
num1 = 10
num2 = 5

print("Add:", add(num1, num2))
print("Subtract:", sub(num1, num2))
print("Multiply:", mul(num1, num2))
print("Divide:", div(num1, num2))

#Challenge 6: Bank Account Simulation
# Initial balance
balance = 1000

# Function to deposit money
def deposit(amount):
    global balance
    balance += amount
    print(f"Deposit {amount} → Balance: {balance}")

# Function to withdraw money
def withdraw(amount):
    global balance
    if amount <= balance:
        balance -= amount
        print(f"Withdraw {amount} → Balance: {balance}")
    else:
        print(f"Insufficient funds! Balance: {balance}")

# Testing the functions
deposit(200)     # Deposit 200
withdraw(500)    # Withdraw 500
withdraw(1000)   # Try to withdraw 1000

#7.
import math

n = int(input("Enter first number: "))
m = int(input("Enter second number: "))

product = n * m

if math.isqrt(product) ** 2 == product:
    print("yes")
else:
    print("no")
5

#8. to check sum is even or odd
n = int(input("Enter first number: "))
m = int(input("Enter second number: "))

total = n + m

if total % 2 == 0:
    print("even")
else:
    print("odd")

# 10
# Taking 10 numbers as input in a single line
nums = list(map(int, input().split()))

# To Find the minimum number
print(min(nums))

#11. largest and smallest no. with its indices
# Read N
N = int(input())

# Reading N numbers
nums = list(map(int, input().split()))

# Finding smallest and largest values
min_val = min(nums)
max_val = max(nums)

# Finding 1-based indices
min_index = nums.index(min_val) + 1
max_index = nums.index(max_val) + 1

# Print indices
print(min_index, max_index)

#12.
import math

# Reading two numbers
N, M = map(int, input().split())

# Checking if either number is zero
if N == 0 or M == 0:
    print(-1)
else:
    print(math.gcd(N, M))

#13.
k = int(input())

# Using formula: sum = K * (K + 1) // 2
total = k * (k + 1) // 2

print(total)

#14. if N is between L and R
N, L, R = map(int, input().split())
if L <= N <= R:
    print("yes")
else:
    print("no")

#15.

n = int(input())

temp = n
sum_digits = 0
prod_digits = 1

# Calculating sum and product of digits
while temp > 0:
    digit = temp % 10
    sum_digits += digit
    prod_digits *= digit
    temp //= 10

# Checking if sum of sum_digits and prod_digits equals the number
if (sum_digits + prod_digits) == n:
    print("Great")
else:
    print("no")

#16. Digit with maximum frequency
n = int(input())
arr = list(map(int, input().split()))

freq = {}
max_freq = 0
result = None

for num in arr:
    freq[num] = freq.get(num, 0) + 1
    # update result if higher frequency found
    if freq[num] > max_freq:
        max_freq = freq[num]
        result = num

print(result)

#17.
N, X = map(int, input().split())

waiting_time = max(0, (N-1) * (10 - X))
print(waiting_time)

#18.
from itertools import combinations


n = int(input())
arr = list(map(int, input().split()))

min_val = min(arr)

subset_sums = set()
for r in range(1, n+1):
    for comb in combinations(arr, r):
        subset_sums.add(sum(comb))


m = min_val + 1
while True:
    if m not in arr and m not in subset_sums:
        print(m)
        break
    m += 1

#18.
n = int(input())
series = [str(i*i + 1) for i in range(1, n+1)]
print(" ".join(series))

#19.
n = int(input())
arr = list(map(int, input().split()))

total = sum(arr)

if total % 30 == 0:
    print(1)
else:
    print(0)

#20
n = int(input())
arr = list(map(int, input().split()))

min_index = arr.index(min(arr))
max_index = arr.index(max(arr))

print(max_index - min_index)

#21
n = int(input())
arr = list(map(int, input().split()))
print(min(arr))